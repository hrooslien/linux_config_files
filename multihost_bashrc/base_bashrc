# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    # PS1='${debian_chroot:+($debian_chroot)}\[\e[38;5;208m\]\u@\h\[\e[00m\]:\[\e[38;5;39m\]\w\[\e[38;5;208m\]\$\e[m '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# I don't want a huge path on display
PROMPT_DIRTRIM=2

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# source host specific bashrc file if it exists
if [ -f ~/linux_config_files/multihost_bashrc/$HOSTNAME ]; then
	source ~/linux_config_files/multihost_bashrc/$HOSTNAME
fi
# source base bash_aliases if it exists
if [ -f ~/linux_config_files/multihost_bash_aliases/base_aliases ]; then
	source ~/linux_config_files/multihost_bash_aliases/base_aliases
fi
# source host specific bash_aliases if they exist
if [ -f ~/linux_config_files/multihost_bash_aliases/$HOSTNAME ]; then
	source ~/linux_config_files/multihost_bash_aliases/$HOSTNAME
fi
# source base bash_functions if it exists
if [ -f ~/linux_config_files/multihost_bash_functions/base_functions ]; then
	source ~/linux_config_files/multihost_bash_functions/base_functions
fi
# source host specific bash_functions if they exist
if [ -f ~/linux_config_files/multihost_bash_functions/$HOSTNAME ]; then
	source ~/linux_config_files/multihost_bash_functions/$HOSTNAME
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# use vi shortcuts in terminal
# set -o vi
# make vim my default editor
# export VISUAL=vim
# export EDITOR=$VISUAL

# disable flow control for that terminal completely (to prevent Crtl-s https://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal)
stty -ixon

TERM=xterm-256color  	# I need this to happen before tmux launches 
			# - it allows the cursor to reflect vi(m) mode

# set capslock to escape key  
# setxkbmap -option ‘caps:ctrl_modifier’
# xcape -e '#66=Escape'

# Launch tmux
if command -v tmux>/dev/null; then
	 [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && tmux new-session -A -s main
fi

