#! bin/bash

# video editing functions
vidspeed () {
    if [[ $# -ne 2 ]] ; then
        echo 'please supply a speed and a video file'
        echo 'e.g: vidspeed 1.2 myvideo.mp4'
        return 1
    fi
    speed=$1
    name=$2
    echo $speed
    echo $name
    ffmpeg -i $name.mp4 -filter_complex "[0:v]setpts=PTS/$speed[v];[0:a]atempo=$speed[a]" -map "[v]" -map "[a]" "$name"_sp$speed.mp4
}

vidcompile () {
    if [[ $# -eq 0 ]] ; then
        echo 'name of output video not supplied'
        return 1
    fi
    ls *mp4 | cut -f 1 | awk '{printf "file '\''%s'\''\n", $0}' > input_vids
    ffmpeg -f concat -i input_vids -c copy $1.mp4
    mkdir -p completed/$1/components
    mv *.mp4 input_vids completed/$1/components
    mv completed/$1/components/$1.mp4 completed/$1
}

vidaudio () {
    if [[ $# -eq 0 ]] ; then
        echo 'name of input video not supplied'
        return 1
    fi

    ffmpeg -i completed/$1/$1.mp4 -i completed/$1/$1.mp3 -c copy -map 0:0 -map 1:0 -map 0:1 -disposition:a:1 comment completed/$1/$1_enhance.mp4
    mv completed/$1/$1.mp4 completed/$1/$1.mp3 completed/$1/components
}

vidrmlast () {
    rm $(ls *mp4 | cut -f1 | tail -n1)
}

vidplaylast () {
    vlc $(ls *mp4 | cut -f1 | tail -n1) &
}

vidduration () {
    total_duration=0
    for file in $(ls *.mp4)
    do
        # let duration=$(bc -l <<<"$(ffmpeg -i $file 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }' | cut -d. f1)+$duration")
        duration=$(ffmpeg -i $file 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')

        total_duration=$(bc <<< "$total_duration + $duration")

    done
    echo $(bc <<< "$total_duration / 60")
}

# close stupid bluetooth error window
# wmctrl -ic 0x01c0000d
